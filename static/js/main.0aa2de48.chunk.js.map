{"version":3,"sources":["assets/profilepic.png","components/NavigationBar.js","model/Home.js","model/Resume.js","model/Projects.js","model/About.js","model/Contact.js","model/SignIn.js","model/SignUp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationBar","className","title","scroll","to","Home","style","width","margin","col","alt","src","profilepic","Resume","Projects","About","Contact","SignIn","SignUp","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,wC,6LCI9BC,EAAgB,WAC3B,OACE,yBAAKC,UAAU,oBACb,kBAAC,SAAD,KACE,kBAAC,SAAD,CAAQA,UAAU,eAAeC,MAAM,eAAeC,QAAM,GAC1D,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,WACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,aAGJ,kBAAC,SAAD,CAAQF,MAAM,gBACZ,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAME,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,WACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,aAGJ,kBAAC,UAAD,KACE,yBAAKH,UAAU,qB,iBCvBZI,EAAO,WAClB,OACE,yBAAKJ,UAAU,UAAUK,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACvD,kBAAC,OAAD,CAAMP,UAAU,aACd,kBAAC,OAAD,CAAMQ,IAAK,IACT,yBAAKR,UAAU,kBAAkBS,IAAI,UAAUC,IAAKC,MACpD,yBAAKX,UAAU,eACX,wDACA,kCCVDY,EAAS,WACpB,OACE,yBAAKZ,UAAU,WACb,6CCHOa,EAAW,WACtB,OACE,yBAAKb,UAAU,WACb,8CCHOc,EAAQ,WACnB,OACE,yBAAKd,UAAU,WACb,4CCHOe,EAAU,WACrB,OACE,yBAAKf,UAAU,WACb,8CCHOgB,EAAS,WACpB,OACE,yBAAKhB,UAAU,WACb,8CCHOiB,EAAS,WACpB,OACE,yBAAKjB,UAAU,WACb,8CCwBSkB,EAjBH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjB,IACjC,kBAAC,IAAD,CAAOgB,KAAK,UAAUC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,SAASC,UAAWP,IAChC,kBAAC,IAAD,CAAOM,KAAK,YAAYC,UAAWR,IACnC,kBAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWN,IAClC,kBAAC,IAAD,CAAOK,KAAK,UAAUC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,UAAWJ,OCXrBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0aa2de48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilepic.c473d262.png\";","import React from 'react'\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl'\nimport { Link } from 'react-router-dom'\n\nexport const NavigationBar = () => {\n  return (\n    <div className=\"demo-big-content\">\n      <Layout>\n        <Header className=\"header-color\" title=\"My Portfolio\" scroll>\n          <Navigation>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/resume\">Resume</Link>\n            <Link to=\"/about\">About</Link>\n            <Link to=\"/contact\">Contact</Link>\n            <Link to=\"/signin\">Sign In</Link>\n          </Navigation>\n        </Header>\n        <Drawer title=\"My Portfolio\">\n          <Navigation>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/resume\">Resume</Link>\n            <Link to=\"/about\">About</Link>\n            <Link to=\"/contact\">Contact</Link>\n            <Link to=\"/signin\">Sign In</Link>\n          </Navigation>\n        </Drawer>\n        <Content>\n          <div className=\"page-content\" />\n        </Content>\n      </Layout>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Grid, Cell } from 'react-mdl'\nimport profilepic from '../assets/profilepic.png'\n\nexport const Home = () => {\n  return (\n    <div className=\"content\" style={{ width: '100%', margin: 'auto' }}>\n      <Grid className=\"home-grid\">\n        <Cell col={12}>\n          <img className=\"profile-picture\" alt=\"profile\" src={profilepic} />\n          <div className='banner-text'>\n              <h1>Full Stack Web Developer</h1>\n              <hr/>\n          </div>\n        </Cell>\n      </Grid>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const Resume = () => {\n  return (\n    <div className='content'>\n      <h1>Resume Page</h1>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const Projects = () => {\n  return (\n    <div className='content'>\n      <h1>Project Page</h1>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const About = () => {\n  return (\n    <div className='content'>\n      <h1>About Page</h1>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const Contact = () => {\n  return (\n    <div className='content'>\n      <h1>Contact Page</h1>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const SignIn = () => {\n  return (\n    <div className='content'>\n      <h1>Sign In Page</h1>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const SignUp = () => {\n  return (\n    <div className=\"content\">\n      <h1>Sign Up Page</h1>\n    </div>\n  )\n}\n","import React from 'react'\nimport './App.css'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport { NavigationBar } from './components/NavigationBar'\nimport { Home } from './model/Home'\nimport { Resume } from './model/Resume'\nimport { Projects } from './model/Projects'\nimport { About } from './model/About'\nimport { Contact } from './model/Contact'\nimport { SignIn } from './model/SignIn'\nimport { SignUp } from './model/SignUp'\n\nconst App = () => {\n  return (\n    <Router>\n      <NavigationBar />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/resume\" component={Resume} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/projects\" component={Projects} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route path=\"/signin\" component={SignIn} />\n        <Route path=\"/signup\" component={SignUp} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'react-mdl/extra/material.css'\nimport 'react-mdl/extra/material.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}